"""
Exemplo de uso do sistema de exclus√£o inteligente em lote
Demonstra como integrar com o sistema existente
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from gerenciador_postgres.intelligent_deletion import (
    IntelligentUserDeletion, 
    BatchDeletionConfig,
    UserDeletionStrategy
)
from gerenciador_postgres.core.validation import ValidationSystem
from gerenciador_postgres.core.logging import get_logger
from gerenciador_postgres.db_manager import DBManager

logger = get_logger(__name__)

def demo_intelligent_deletion():
    """
    Demonstra√ß√£o do sistema de exclus√£o inteligente
    """
    print("=== Sistema de Exclus√£o Inteligente de Usu√°rios PostgreSQL ===\n")
    
    try:
        # Configurar componentes (simulado)
        print("1. Configurando sistema...")
        validation = ValidationSystem()
        
        # Para demonstra√ß√£o, vamos simular sem conex√£o real
        class MockDBManager:
            def __init__(self):
                self.conn = None
                
        db_manager = MockDBManager()
        deletion_system = IntelligentUserDeletion(db_manager, validation)
        
        # Lista de usu√°rios para an√°lise
        users_to_analyze = [
            "ana.schuhli",
            "joao.silva", 
            "maria.santos",
            "pedro.oliveira",
            "temp_user_001"
        ]
        
        print(f"2. Analisando {len(users_to_analyze)} usu√°rios...\n")
        
        # An√°lise pr√©via (preview)
        preview = deletion_system.preview_batch_deletion(users_to_analyze)
        
        print("üìä PREVIEW DA EXCLUS√ÉO EM LOTE:")
        print(f"   Total de usu√°rios: {preview['total_users']}")
        print(f"   Usu√°rios com dados (reatribuir): {preview['strategies']['reassign_and_drop']}")
        print(f"   Usu√°rios s√≥ com permiss√µes: {preview['strategies']['drop_permissions_only']}")
        print(f"   Usu√°rios bloqueados/problemas: {preview['strategies']['skip_blocked']}")
        print()
        
        # Configura√ß√£o para exclus√£o
        config = BatchDeletionConfig(
            reassign_to_user="postgres",
            dry_run=True,  # Simular sem executar
            continue_on_error=True,
            transaction_per_user=True,
            log_details=True
        )
        
        print("3. Configura√ß√£o da exclus√£o:")
        print(f"   Reatribuir objetos para: {config.reassign_to_user}")
        print(f"   Modo simula√ß√£o (dry run): {config.dry_run}")
        print(f"   Continuar em caso de erro: {config.continue_on_error}")
        print(f"   Transa√ß√£o por usu√°rio: {config.transaction_per_user}")
        print()
        
        # Executar exclus√£o em lote (simulado)
        print("4. Executando exclus√£o em lote (simula√ß√£o)...\n")
        
        result = deletion_system.batch_delete_users(users_to_analyze, config)
        
        print("üìã RESULTADO DA EXCLUS√ÉO EM LOTE:")
        print(f"   Status geral: {'‚úì SUCESSO' if result.success else '‚úó FALHA'}")
        print(f"   Mensagem: {result.message}")
        
        if result.data:
            print(f"   Usu√°rios processados: {result.data.get('total_users', 0)}")
            print(f"   Sucessos: {result.data.get('successful', 0)}")
            print(f"   Falhas: {result.data.get('failed', 0)}")
        print()
        
        # Demonstrar an√°lise individual
        print("5. An√°lise detalhada de usu√°rio espec√≠fico:\n")
        
        user_example = "ana.schuhli"
        analysis = deletion_system.analyze_user(user_example)
        
        print(f"üë§ AN√ÅLISE DO USU√ÅRIO: {user_example}")
        print(f"   Possui objetos: {analysis.has_owned_objects}")
        print(f"   Possui permiss√µes: {analysis.has_permissions}")
        print(f"   Tem conex√µes ativas: {analysis.has_blocking_connections}")
        print(f"   Estrat√©gia recomendada: {analysis.strategy.value}")
        print(f"   Detalhes: {analysis.details}")
        print()
        
        # Exemplo de SQL que seria executado
        print("6. Exemplo de SQL que seria executado:\n")
        
        if analysis.strategy == UserDeletionStrategy.REASSIGN_AND_DROP:
            print("   -- Para usu√°rio com dados:")
            print(f"   REASSIGN OWNED BY {user_example} TO postgres;")
            print(f"   DROP OWNED BY {user_example};")
            print(f"   DROP ROLE {user_example};")
        elif analysis.strategy == UserDeletionStrategy.DROP_PERMISSIONS_ONLY:
            print("   -- Para usu√°rio s√≥ com permiss√µes:")
            print(f"   DROP OWNED BY {user_example};")
            print(f"   DROP ROLE {user_example};")
        else:
            print("   -- Usu√°rio seria ignorado (bloqueado/erro)")
        print()
        
        print("7. Integra√ß√£o com sistema de auditoria:")
        print("   ‚úì Todas as opera√ß√µes s√£o auditadas automaticamente")
        print("   ‚úì Logs estruturados em JSON")
        print("   ‚úì M√©tricas de performance registradas")
        print("   ‚úì Valida√ß√£o de entrada autom√°tica")
        print()
        
        print("‚ú® Demonstra√ß√£o conclu√≠da com sucesso!")
        
    except Exception as e:
        logger.error(f"Erro na demonstra√ß√£o: {e}")
        print(f"‚ùå Erro na demonstra√ß√£o: {e}")

def create_batch_deletion_ui_example():
    """
    Exemplo de interface gr√°fica para exclus√£o em lote
    """
    ui_code = '''
"""
Exemplo de interface gr√°fica para exclus√£o em lote
"""
from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
    QTextEdit, QCheckBox, QComboBox, QPushButton,
    QProgressBar, QTableWidget, QTableWidgetItem,
    QGroupBox, QSpinBox, QMessageBox
)
from PyQt6.QtCore import Qt, QThread, pyqtSignal

class BatchDeletionWidget(QWidget):
    """Widget para exclus√£o em lote de usu√°rios"""
    
    def __init__(self, deletion_system):
        super().__init__()
        self.deletion_system = deletion_system
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout()
        
        # √Årea de entrada de usu√°rios
        users_group = QGroupBox("Usu√°rios para Exclus√£o")
        users_layout = QVBoxLayout()
        
        self.users_text = QTextEdit()
        self.users_text.setPlaceholderText(
            "Digite os nomes dos usu√°rios, um por linha:\\n"
            "ana.schuhli\\n"
            "joao.silva\\n"
            "maria.santos"
        )
        self.users_text.setMaximumHeight(100)
        users_layout.addWidget(self.users_text)
        
        users_group.setLayout(users_layout)
        layout.addWidget(users_group)
        
        # Configura√ß√µes
        config_group = QGroupBox("Configura√ß√µes")
        config_layout = QVBoxLayout()
        
        # Usu√°rio para reatribui√ß√£o
        reassign_layout = QHBoxLayout()
        reassign_layout.addWidget(QLabel("Reatribuir objetos para:"))
        self.reassign_combo = QComboBox()
        self.reassign_combo.addItems(["postgres", "admin", "dba"])
        self.reassign_combo.setEditable(True)
        reassign_layout.addWidget(self.reassign_combo)
        config_layout.addLayout(reassign_layout)
        
        # Op√ß√µes
        self.dry_run_cb = QCheckBox("Simular apenas (n√£o executar)")
        self.dry_run_cb.setChecked(True)
        config_layout.addWidget(self.dry_run_cb)
        
        self.continue_on_error_cb = QCheckBox("Continuar em caso de erro")
        self.continue_on_error_cb.setChecked(True)
        config_layout.addWidget(self.continue_on_error_cb)
        
        self.log_details_cb = QCheckBox("Log detalhado")
        self.log_details_cb.setChecked(True)
        config_layout.addWidget(self.log_details_cb)
        
        config_group.setLayout(config_layout)
        layout.addWidget(config_group)
        
        # Bot√µes de a√ß√£o
        buttons_layout = QHBoxLayout()
        
        self.preview_btn = QPushButton("Analisar Usu√°rios")
        self.preview_btn.clicked.connect(self.preview_deletion)
        buttons_layout.addWidget(self.preview_btn)
        
        self.execute_btn = QPushButton("Executar Exclus√£o")
        self.execute_btn.clicked.connect(self.execute_deletion)
        self.execute_btn.setEnabled(False)
        buttons_layout.addWidget(self.execute_btn)
        
        layout.addLayout(buttons_layout)
        
        # Progresso
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        # Tabela de resultados
        results_group = QGroupBox("An√°lise dos Usu√°rios")
        results_layout = QVBoxLayout()
        
        self.results_table = QTableWidget()
        self.results_table.setColumnCount(4)
        self.results_table.setHorizontalHeaderLabels([
            "Usu√°rio", "Estrat√©gia", "Objetos", "Status"
        ])
        results_layout.addWidget(self.results_table)
        
        results_group.setLayout(results_layout)
        layout.addWidget(results_group)
        
        self.setLayout(layout)
    
    def get_usernames(self):
        """Obt√©m lista de usu√°rios do campo de texto"""
        text = self.users_text.toPlainText().strip()
        if not text:
            return []
        return [line.strip() for line in text.split('\\n') if line.strip()]
    
    def get_config(self):
        """Obt√©m configura√ß√£o atual"""
        from gerenciador_postgres.intelligent_deletion import BatchDeletionConfig
        
        return BatchDeletionConfig(
            reassign_to_user=self.reassign_combo.currentText(),
            dry_run=self.dry_run_cb.isChecked(),
            continue_on_error=self.continue_on_error_cb.isChecked(),
            log_details=self.log_details_cb.isChecked()
        )
    
    def preview_deletion(self):
        """Analisa usu√°rios antes da exclus√£o"""
        usernames = self.get_usernames()
        if not usernames:
            QMessageBox.warning(self, "Aviso", "Digite pelo menos um usu√°rio")
            return
        
        try:
            # Analisar usu√°rios
            grouped_analyses = self.deletion_system.analyze_batch(usernames)
            
            # Preencher tabela
            self.results_table.setRowCount(len(usernames))
            
            row = 0
            for strategy, analyses in grouped_analyses.items():
                for analysis in analyses:
                    self.results_table.setItem(row, 0, QTableWidgetItem(analysis.username))
                    self.results_table.setItem(row, 1, QTableWidgetItem(strategy))
                    self.results_table.setItem(row, 2, QTableWidgetItem(
                        str(analysis.details.get('objects_count', 0))
                    ))
                    
                    # Status baseado na estrat√©gia
                    if analysis.strategy.value == "skip_blocked":
                        status = "‚ùå Bloqueado"
                    elif analysis.strategy.value == "reassign_and_drop":
                        status = "üîÑ Reatribuir"
                    else:
                        status = "‚úÖ Apenas permiss√µes"
                    
                    self.results_table.setItem(row, 3, QTableWidgetItem(status))
                    row += 1
            
            self.results_table.resizeColumnsToContents()
            self.execute_btn.setEnabled(True)
            
        except Exception as e:
            QMessageBox.critical(self, "Erro", f"Erro na an√°lise: {e}")
    
    def execute_deletion(self):
        """Executa a exclus√£o em lote"""
        usernames = self.get_usernames()
        config = self.get_config()
        
        if not usernames:
            return
        
        # Confirmar a√ß√£o
        if not config.dry_run:
            reply = QMessageBox.question(
                self, "Confirmar Exclus√£o",
                f"Tem certeza que deseja excluir {len(usernames)} usu√°rios?\\n"
                "Esta a√ß√£o n√£o pode ser desfeita!",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            if reply != QMessageBox.StandardButton.Yes:
                return
        
        # Executar em thread separada
        self.execute_btn.setEnabled(False)
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)  # Indeterminado
        
        self.deletion_thread = DeletionThread(
            self.deletion_system, usernames, config
        )
        self.deletion_thread.finished.connect(self.on_deletion_finished)
        self.deletion_thread.start()
    
    def on_deletion_finished(self, result):
        """Callback quando exclus√£o termina"""
        self.progress_bar.setVisible(False)
        self.execute_btn.setEnabled(True)
        
        if result.success:
            QMessageBox.information(
                self, "Sucesso", 
                f"Exclus√£o conclu√≠da: {result.message}"
            )
        else:
            QMessageBox.warning(
                self, "Aten√ß√£o", 
                f"Exclus√£o com problemas: {result.message}"
            )
        
        # Atualizar tabela com resultados
        self.update_results_table(result)
    
    def update_results_table(self, result):
        """Atualiza tabela com resultados da execu√ß√£o"""
        if not result.data or 'results' not in result.data:
            return
        
        for i, user_result in enumerate(result.data['results']):
            if i < self.results_table.rowCount():
                status = "‚úÖ Sucesso" if user_result.success else "‚ùå Falha"
                self.results_table.setItem(i, 3, QTableWidgetItem(status))

class DeletionThread(QThread):
    """Thread para executar exclus√£o em background"""
    finished = pyqtSignal(object)
    
    def __init__(self, deletion_system, usernames, config):
        super().__init__()
        self.deletion_system = deletion_system
        self.usernames = usernames
        self.config = config
    
    def run(self):
        result = self.deletion_system.batch_delete_users(
            self.usernames, self.config
        )
        self.finished.emit(result)
'''
    
    # Salvar exemplo de UI
    with open("d:\\GitHub\\IFSC_SGBD\\examples\\batch_deletion_ui.py", "w", encoding="utf-8") as f:
        f.write(ui_code)
    
    print("üíæ Exemplo de UI salvo em: examples/batch_deletion_ui.py")

if __name__ == "__main__":
    # Executar demonstra√ß√£o
    demo_intelligent_deletion()
    
    print("\\n" + "="*70 + "\\n")
    
    # Criar exemplo de UI
    create_batch_deletion_ui_example()
